

////////////////////////////////////////////////////////////////////////


using namespace std;

#include <iostream>
#include <unistd.h>
#include <stdlib.h>
#include <cmath>

#include "vx_util.h"

#include "fo_pair.h"


////////////////////////////////////////////////////////////////////////


   //
   //  Code for class FO_Pair
   //


////////////////////////////////////////////////////////////////////////


FO_Pair::FO_Pair()

{

init_from_scratch();

}


////////////////////////////////////////////////////////////////////////


FO_Pair::~FO_Pair()

{

clear();

}


////////////////////////////////////////////////////////////////////////


FO_Pair::FO_Pair(const FO_Pair & p)

{

init_from_scratch();

assign(p);

}


////////////////////////////////////////////////////////////////////////


FO_Pair & FO_Pair::operator=(const FO_Pair & p)

{

if ( this == &p )  return ( * this );

assign(p);

return ( * this );

}


////////////////////////////////////////////////////////////////////////


void FO_Pair::init_from_scratch()

{

clear();

return;

}


////////////////////////////////////////////////////////////////////////


void FO_Pair::clear()

{

nf = no = 0;

index = -1;

return;

}


////////////////////////////////////////////////////////////////////////


void FO_Pair::assign(const FO_Pair & p)

{

clear();

nf = p.nf;
no = p.no;

index = p.index;

return;

}


////////////////////////////////////////////////////////////////////////


void FO_Pair::dump(ostream & out, int depth) const

{

Indent prefix(depth);

out << prefix << "(nf, no) = (" << nf << ", " << no << ")\n";
out << prefix << "index    = " << index << "\n";

   //
   //  done
   //

out.flush();

return;

}


////////////////////////////////////////////////////////////////////////






