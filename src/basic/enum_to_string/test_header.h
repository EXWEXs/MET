

////////////////////////////////////////////////////////////////////////


#ifndef  __TEST_HEADER_H__
#define  __TEST_HEADER_H__


////////////////////////////////////////////////////////////////////////


#include <iostream>


////////////////////////////////////////////////////////////////////////


typedef enum {

   shyster, 

   ambulance_chaser, 

   ok_guy    //  unlikely

} lawyer;


////////////////////////////////////////////////////////////////////////


   //
   //  class
   //
   //  enum
   //


////////////////////////////////////////////////////////////////////////


/*

class enum

*/


////////////////////////////////////////////////////////////////////////


class Doofus;   //  forward reference


////////////////////////////////////////////////////////////////////////


enum MonSteR {


   to, 
   be, 
   Or, 
   Not, 

   to_be = -1000,

      //
      //
      //

   eeee, 
   fffff, 
   gg, 
   hhhhhhhhhhhh = 8723489

};


////////////////////////////////////////////////////////////////////////


class Foobar {

   private:

      int i;

   public:

      int j;

   Foobar();
  ~Foobar();
   Foobar(const Foobar &);
   Foobar & operator=(const Foobar &);

   enum Yabba { a, b, c } y;

   // enum { a, b, c } y;

   class Test {

      public:

         enum foo {

            foo_1, 
            foo_2 = 17, 

            no_foo_for_you

         };

   };

   private:

      void gotcha() const;

};



////////////////////////////////////////////////////////////////////////


#endif   /*  __TEST_HEADER_H__  */


////////////////////////////////////////////////////////////////////////


