////////////////////////////////////////////////////////////////////////////////
//
// Point-Stat configuration file.
//
// For additional information, see the MET_BASE/config/README file.
//
////////////////////////////////////////////////////////////////////////////////

//
// Output model name to be written
//
model = "WRF";

////////////////////////////////////////////////////////////////////////////////

//
// Verification grid
//
regrid = {
   to_grid    = NONE;
   vld_thresh = 0.5;
   method     = NEAREST;
   width      = 1;
};

////////////////////////////////////////////////////////////////////////////////

cnt_thresh  = [ NA ];
cnt_logic   = UNION;
wind_thresh = [ NA ];
wind_logic  = UNION;

//
// Forecast and observation fields to be verified
//
fcst = {
   message_type = [ "ADPUPA", "ADPSFC" ];
   sid_exc      = [];

   field = [
      {
        name       = "TMP";
        level      = [ "P750-900" ];
        cat_thresh = [ <=273, >273 ];
      },

      {
        name       = "UGRD";
        level      = [ "Z10" ];
        cat_thresh = [ >=5 ];
      },

      {
        name       = "VGRD";
        level      = [ "Z10" ];
        cat_thresh = [ >=5 ];
      }
   ];

};
obs = fcst;

////////////////////////////////////////////////////////////////////////////////

//
// Climatology mean data
//
climo_mean = {

   //
   // Climatology mean files.
   //
   file_name = [];

   //
   // field must be empty or the same length as fcst.field.
   //
   field = [];

   //
   // Method for regridding climatology data to the verification grid.
   //
   regrid = {
      vld_thresh = 0.5;
      method     = NEAREST;
      width      = 1;
   }

   //
   // Method for interpolating climatology to forecast valid time:
   //    NEAREST for data closest in time
   //    UW_MEAN for average of data before and after
   //    DW_MEAN for linear interpolation in time of data before and after
   //
   time_interp_method = DW_MEAN;

   //
   // When searching climatology data, only consider times where the month
   // matches the forecast month.  Set match_day to TRUE or FALSE to define
   // whether the climatology day must also match.
   //    match_day = FALSE for monthly climatology
   //    match_day = TRUE  for daily climatology
   //
   match_day = FALSE;

   //
   // Time step of the climatology data in seconds.  Set to 60*60*6 for
   // 6-hourly data or 60*60 for hourly data.
   //
   time_step = 21600;
}

////////////////////////////////////////////////////////////////////////////////

//
// Point observation time window
//
obs_window = {
   beg = -5400;
   end =  5400;
}

////////////////////////////////////////////////////////////////////////////////

//
// Verification masking regions
//
mask = {
   grid = [ "DTC165", "DTC166" ];
   poly = [ "MET_BASE/poly/LMV.poly" ];
   sid  = [];
};

////////////////////////////////////////////////////////////////////////////////

//
// Confidence interval settings
//
ci_alpha  = [ 0.05 ];

boot = {
   interval = PCTILE;
   rep_prop = 1.0;
   n_rep    = 1000;
   rng      = "mt19937";
   seed     = "1";
};

////////////////////////////////////////////////////////////////////////////////

//
// Interpolation methods
//
interp = {
   vld_thresh = 1.0;

   type = [
      {
         method = NEAREST;
         width  = 1;
      },
      {
         method = MEDIAN;
         width  = 3;
      },
      {
         method = DW_MEAN;
         width  = 3;
      }
   ];
};

////////////////////////////////////////////////////////////////////////////////

//
// Statistical output types
//
output_flag = {
   fho    = BOTH;
   ctc    = BOTH;
   cts    = BOTH;
   mctc   = NONE;
   mcts   = NONE;
   cnt    = BOTH;
   sl1l2  = BOTH;
   sal1l2 = BOTH;
   vl1l2  = BOTH;
   val1l2 = BOTH;
   pct    = NONE;
   pstd   = NONE;
   pjc    = NONE;
   prc    = NONE;
   mpr    = BOTH;
};

////////////////////////////////////////////////////////////////////////////////

obs_quality    = [];
duplicate_flag = NONE;
rank_corr_flag = TRUE;
tmp_dir        = "/tmp";
output_prefix  = "";
version        = "V5.1";

////////////////////////////////////////////////////////////////////////////////
