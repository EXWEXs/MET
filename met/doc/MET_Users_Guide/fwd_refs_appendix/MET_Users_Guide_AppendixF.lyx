#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Python Embedding 
\begin_inset CommandInset label
LatexCommand label
name "chap:App_F_Python_Embedding"

\end_inset


\end_layout

\begin_layout Standard
As of release 8.0, a degree of Python embedding has been made available in
 MET.
 Users may use Python scripts and whatever associated Python packages they
 wish in order to prepare 2D gridded data fields for reading by the MET
 tools.
 We fully expect that this degree of embedding will increase in the future.
 In addition, plans are in place in upcoming releases, to extend Python
 with MET, so that the user may invoke MET tools directly from their Python
 script.
 Currently only Python 2.x is supported, but users should be aware that this
 will soon be changing to Python 3.
\end_layout

\begin_layout Standard
In order to use this feature, the user's local Python installation must
 have the C-language Python header files and libraries.
 Sometimes when Python is installed locally, these header files and libraries
 are deleted at the end of the installation process, leaving only the binary
 executable and any run-time shared object files needed, but they must be
 present in order to use the MET Python embedding.
 Assuming the requisite Python files are present, and that Python embedding
 is enabled when building MET (which is done by passing the 
\family typewriter
--enable-python
\family default
 option to the 
\family typewriter
configure
\family default
 command line), the MET C++ code will use these in the compilation process
 to link directly to the Python libraries.
\end_layout

\begin_layout Standard
In addition to the 
\family typewriter
configure
\family default
 option mentioned above, two environment variables, 
\family typewriter
MET_PYTHON_CC
\family default
 and 
\family typewriter
MET_PYTHON_LD
\family default
 must be set prior to compiling MET when Python embedding is used.
 These variables are used on the compiler command line to enable the compiler
 to find the requisite Python header files and libraries in the user's local
 filesystem.
 Fortunately, Python provides a way to set these variables properly, freeing
 the user from the necessity of having any expert knowledge of the compiling
 and linking process.
 Along with the 
\family typewriter
Python
\family default
 executable, there should be another executable called 
\family typewriter
python-config, 
\family default
whose output can be used to set these environment variables as follows:
\end_layout

\begin_layout Itemize
On the command line, run 
\begin_inset Quotes eld
\end_inset


\family typewriter
python-config --cflags
\family default

\begin_inset Quotes erd
\end_inset

, and set the value of 
\family typewriter
MET_PYTHON_CC 
\family default
to the output of that command.
\end_layout

\begin_layout Itemize
Again on the command line, run 
\begin_inset Quotes eld
\end_inset


\family typewriter
python-config --ldflags
\family default

\begin_inset Quotes erd
\end_inset

, and set the value of 
\family typewriter
MET_PYTHON_LD 
\family default
to the output of that command.
\end_layout

\begin_layout Standard
Make sure these environment variables are set and in effect before building
 MET.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vskip 0.1in
\backslash
centerline{
\backslash
hbox to 3.0in{
\backslash
hrulefill}}
\backslash
vskip 0.1in
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We now turn our attention to the details of how to write Python scripts
 in order that the MET tools may extract 2D gridded data fields from them.
 Currently, MET offers two ways to interact with Python scripts: by using
 NumPy arrays or by using Xarray objects.
 The user specifies on the command line (more on this later) which interface
 is to be used in the Python script.
 The user's scripts can use any Python libraries that are supported by the
 local Python installation, or any personal or institutional libraries or
 code that is desired in order to implement the Python script, but at the
 end of the script, the data must have been loaded into either a NumPy array
 or an Xarray object.
 This offers advantages when using data file formats that MET does not directly
 support: If there is Python code to read the data format, the the user
 can use those tools to read the data, and then copy the data into a NumPy
 array or an Xarray object.
 MET can then ingest the data via the Python script.
\end_layout

\begin_layout Standard

\series bold
Using NumPy
\series default
.
 The data must be loaded into a 2D NumPy array named 
\family typewriter
met_data
\family default
.
 In addition there must be a Python dictionary named 
\family typewriter
attrs
\family default
 which contains metadata such as timestamps, grid projection and other informati
on.
 Here is an example 
\family typewriter
attrs
\family default
 dictionary:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

attrs = {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   'valid': '20050807_120000',
\end_layout

\begin_layout Plain Layout

   'init':  '20050807_000000',
\end_layout

\begin_layout Plain Layout

   'lead':   120000,
\end_layout

\begin_layout Plain Layout

   'accum': '120000',
\end_layout

\begin_layout Plain Layout

   'name': 'Foo',
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   'grid': {
\end_layout

\begin_layout Plain Layout

      'type': 'Lambert Conformal',
\end_layout

\begin_layout Plain Layout

      'hemisphere': 'N',
\end_layout

\begin_layout Plain Layout

      'name': 'FooGrid',
\end_layout

\begin_layout Plain Layout

      'scale_lat_1': 25.0,
\end_layout

\begin_layout Plain Layout

      'scale_lat_2': 25.0,
\end_layout

\begin_layout Plain Layout

      'lat_pin': 12.19,
\end_layout

\begin_layout Plain Layout

      'lon_pin': -135.459,
\end_layout

\begin_layout Plain Layout

      'x_pin': 0.0,
\end_layout

\begin_layout Plain Layout

      'y_pin': 0.0,
\end_layout

\begin_layout Plain Layout

      'lon_orient': -95.0,
\end_layout

\begin_layout Plain Layout

      'd_km': 40.635,
\end_layout

\begin_layout Plain Layout

      'r_km': 6371.2,
\end_layout

\begin_layout Plain Layout

      'nx': 185,
\end_layout

\begin_layout Plain Layout

      'ny': 129,
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Valid time, intitialization time, lead time and accumulation time (if any)
 are indicated by strings and/or numbers.
 Lead and accumulation times are given in HHMMSS format.
 Also included is a 
\family typewriter
name
\family default
 for the data field.
 The rest of the 
\family typewriter
attrs
\family default
 dictionary gives the grid size and projection information in the same format
 as in the netCDF files written out by the MET tools.
 Note that the 
\family typewriter
grid
\family default
 entry in the 
\family typewriter
attrs
\family default
 dictionary is itself a dictionary.
\end_layout

\begin_layout Standard

\series bold
Using Xarray Objects
\series default
.
 For Xarray objects, things are very similar to the NumPy case.
 An Xarray object has a NumpyArray called 
\family typewriter
values
\family default
, and an attributes dictionary called 
\family typewriter
attrs
\family default
.
 The user must name the Xarray object to be 
\family typewriter
met_data
\family default
.
 When one of the MET tools runs the python script, it will look for an Xarray
 object named met_data, and will retrieve the data and metadata from the
 
\family typewriter
values
\family default
 and 
\family typewriter
attrs
\family default
 parts, respectively, of the Xarray object.
 The Xarray 
\family typewriter
attrs
\family default
 dictionary is loaded in the same way as for the NumPy interface.
 The 
\family typewriter
values
\family default
 Numpy array part of the Xarray object is also populated in the same way
 as the NumPy case.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vskip 0.1in
\backslash
centerline{
\backslash
hbox to 3.0in{
\backslash
hrulefill}}
\backslash
vskip 0.1in
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It remains to discuss command lines and config files.
 On the command line for any of the MET tools which will be obtaining its
 data from a Python script rather than directly from a data file, the user
 should specify either PYTHON_NUMPY or PYTHON_XARRAY wherever a (forecast
 or obs) data file name would normally be given.
 Then in the 
\family typewriter
name
\family default
 entry of the config file dictionaries for the forecast or observed data,
 the user should give the file name of the Python script to be run.
 (Note that for tools like MODE that take two data files, it would be entirely
 possible to use the Numpy interface for one file and the Xarray interface
 for the other.) The only exception to this is the 
\family typewriter
plot_data_plane
\family default
 tool, where the 
\family typewriter
name
\family default
 is specified on the command line rather than in a config file.
\end_layout

\end_body
\end_document
